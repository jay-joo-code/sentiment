generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]

  @@map(name: "users")
}

model Task {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  name       String?
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isComplete Boolean  @default(false)

  @@map(name: "tasks")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model RedditComment {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @map(name: "created_at")
  body               String
  responseTo         String
  permalink          String
  ups                Int
  sentimentScore     Int
  sentimentMagnitude Int

  Sentiment   Sentiment? @relation(fields: [sentimentId], references: [id])
  sentimentId Int?
  @@map(name: "redditComment")
}

model Sentiment {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now()) @map(name: "created_at")
  updatedAt          DateTime        @updatedAt @map(name: "updated_at")
  query              String
  sentimentScore     Int
  sentimentMagnitude Int
  topComments        RedditComment[]


  @@map(name: "sentiments")
}
